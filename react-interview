
Swagger is an Interface Description Language for describing RESTful APIs expressed using JSON. 
Swagger is used together with a set of open-source software tools to design, build, document, and use RESTful web services.
 Swagger includes automated documentation, code generation, and test-case generation.

What is the difference between state and props?
Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, 
they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state
is managed within the component similar to variables declared within a function.
What is state in React?
State of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.
State is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any component other than the one that owns and sets it.
What are props in React?
Props are inputs to components. They are data passed down from a parent component to a child component.
The primary purpose of props in React is to provide following component functionality:
i.	Pass custom data to your component.
ii.	Trigger state changes.
iii.	Use via this.props.reactProp inside component's render() method.
For example, let us create an element with reactProp property:
<Element reactProp={'1'} />
This reactProp (or whatever you came up with) name then becomes a property attached to React's native props object which originally already exists on all components created using React library.
props.reactProp

1.	What is JSX?
JSX is a XML-like syntax extension to ECMAScript (the acronym stands for JavaScript XML). Basically it just provides syntactic
sugar for the React.createElement() function, giving us using HTML like template syntax.
In the example below text inside <h1> tag is returned as JavaScript function to the render function.
class App extends React.Component {
  render() {
    return(
      <div>
        <h1>{'Welcome to React world!'}</h1>
      </div>
    )
  }
}
2.	
3.	What is the difference between Element and Component?
An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. 
Components are the building blocks of any React app and a typical React app will have many of these. Simply put, a component is a JavaScript class or function that optionally accepts inputs properties(props) and returns a React element that describes how a section of the UI (User Interface) should appear.
What are Pure Components?
React.PureComponent is exactly the same as React.Component except that it handles the shouldComponentUpdate() method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Component on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever
What is "key" prop and what is the benefit of using it in arrays of elements?
A key is a special string attribute you should include when creating arrays of elements. Key prop helps React identify
which items have changed, are added, or are removed.

What is the use of refs?
The ref is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.

What are forward refs?
Ref forwarding is a feature that lets some components take a ref they receive, and pass it further down to a child.
What is Virtual DOM?
The Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the "real" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation.
How Virtual DOM works?
The Virtual DOM works in three simple steps.
i.	Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.
ii.	Then the difference between the previous DOM representation and the new one is calculated.
iii.	Once the calculations are done, the real DOM will be updated with only the things that have actually changed.
What is Lifting State Up in React?
When several components need to share the same changing data then it is recommended to lift the shared state up to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.
36. What is Redux?
It is a predictable state container for JavaScript applications and is used for the entire applications state management. Applications developed with Redux are easy to test and can run in different environments showing consistent behavior.

37. What are the three principles that Redux follows?
i.	Single source of truth: The state of the entire application is stored in an object/ state tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.
ii.	State is read-only: The only way to change the state is to trigger an action. An action is a plain JS object describing the change. Just like state is the minimal representation of data, the action is the minimal representation of the change to that data. 
iii.	Changes are made with pure functions: In order to specify how the state tree is transformed by actions, you need pure functions. Pure functions are those whose return value depends solely on the values of their arguments.

28. How are forms created in React?
iv.	React offers a stateful, reactive approach to building forms.  The form data, for instance, is usually handled by the component rather than the DOM, and is usually implemented using controlled components.
v.	The difference is can use a callback function to handle form events and then using the container’s state to store the form data. This gives your component better control.
vi.	The callback function is triggered on events, including change of form control values, or on form submission.
29. What do you know about controlled and uncontrolled components
In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself. To write an uncontrolled component, instead of writing an event handler for every state update, you can use a ref to get form values from the DOM.
What are Higher-Order Components?
A higher-order component (HOC) is a function that takes a component and returns a new component. Basically, 
HOC can be used for code use, and logic abstraction.

What is context?
Context provides a way to pass data through the component tree without having to pass props down manually at every level.
For example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.
const {Provider, Consumer} = React.createContext(defaultValue)
What is children prop?
Children is a prop (this.props.children) that allow you to pass components as data to other components, just like any other prop you use. Component tree put between component's opening and closing tag will be passed to that component as children prop.

const MyDiv = React.createClass({
  render: function() {
    return <div>{this.props.children}</div>
  }
})

ReactDOM.render(
  <MyDiv>
    <span>{'Hello'}</span>
    <span>{'World'}</span>
  </MyDiv>,
  node
)

How to apply validation on props in React?
When the application is running in development mode, React will automatically check all props that we set on components to make sure they have correct type. 
import PropTypes from 'prop-types'

What are error boundaries in React v16?
Error boundaries are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.
A class component becomes an error boundary if it defines a new lifecycle method called componentDidCatch(error, info) or static getDerivedStateFromError() :

41. How are Actions defined in Redux?
Actions in React must have a type property that indicates the type of ACTION being performed. They must be defined as a String constant and you can add more properties to it as well. In Redux, actions are created using the functions called Action Creators. Below is an example of Action and Action Creator:
function addTodo(text) {
       return {
                type: ADD_TODO,    
                 text    
    }
}
42. Explain the role of Reducer.
Reduces job by taking the preceding state and action, and then returns a fresh state. It determines what kind of update is required based on the action type, and then returns new values. If there is no work to be accomplished, it returns the prior state as it is.

Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components.
What is undirection data flow?
What is unidirection data flow.
Since the flow of data is unidirectional, there is only one way through which view can be updated.
Only state can update Dom, Dom can’t update state.
State lifing
In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it.

In a controlled component, the input data is handled by a React state and using an event handler for every state update. The alternative is uncontrolled components, where form data is handled by the DOM itself. To write an uncontrolled component, instead of writing an event handler for every state update, you can use a ref to get form values from the DOM.
What is ref
Const inputRef = useRef();
<input ref={inputRef} type=”text”>  inputRef.current.focus()
What is Key;
33. What is the significance of keys in React?
Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity. Keys Must Only Be Unique Among Siblings.

React.memo is a higher-order component (or HOC for short) which accepts a react component which dependent on props to conditionally update the component using memoization, 
whereas useMemo is a react hook that will accept a function and a dependency array and then memoize the value returned from the function passed into it.

useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to child components that rely on reference equality to prevent unnecessary renders
useEffect is a Hook that allows you to perform side-effects in functional components
side effect mean whenever you do something which effect the state of the component.
If you provide useEffect an empty dependency array, it’ll run exactly once,
forgot to add id to the dependency array? You’d cause an infinite loop.
Adding props.id to it will ensure useEffect only runs if props.id changes:

Custom Hooks are a mechanism to reuse stateful logic (such as setting up a subscription and remembering the current value), but every time you use a custom Hook, all state and effects inside of it are fully isolated

Interfaces are basically a way to describe data shapes, for example, an object.
Type is a definition of a type of data, for example, a union, primitive, intersection, tuple, or any other type.
Declaration merging

