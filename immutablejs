Immutable.JS does a lot of work behind the scenes to optimize performance. 
This is the key to its power, as using immutable data structures can involve a lot of expensive copying. 
In particular, immutably manipulating large, complex data sets, 
such as a nested Redux state tree, can generate many intermediate copies of objects, 
which consume memory and slow down performance as the browserâ€™s garbage collector fights to clean things up.

Immutable.JS avoids this by cleverly sharing data structures under the surface, 
minimizing the need to copy data. It also enables complex chains of operations to be carried out 
without creating unnecessary (and costly) cloned intermediate data that will quickly be thrown away.

