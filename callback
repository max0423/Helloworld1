
JSON Web Token (JWT) is an open standard
that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.


A closure is a function defined inside another function (called parent function) and has access to the variable 
which is declared and defined in parent function scope.

The closure has access to the variable in three scopes:

Variable declared in his own scope
Variable declared in parent function scope
Variable declared in the global namespace

Arrow function:
An arrow function expression is a syntactically compact alternative to a regular 
function expression, although without its own bindings to the this, arguments, super, or new.target keywords. 

callback:

a function passed to some other function,
the callback function will be executed after another function has finished executing.

Promise:

A promise is an object that may produce a single value come time in the feature.
Promises is return from a function call, and have the reject and resolve function as parameter,
Which can according certain scenario to resolve or reject a value.


Observabel:

Observable provide support for passing message between publisher and subscriber in our app.
The observable is used for asynchrounrous stream data.
A stream of data possible asynchronous or possible multiple value over time. Whenever observable emits a new value  
and observer will execute the code when receive the value.


the difference between promise and observable
the main difference between a promise and an observable is that a promise emits only a single value, 
whereas an observable emits multiple values



async functions returns a promise.
async functions use an implicit Promise to return its result. Even if you donâ€™t return a promise explicitly 
async function makes sure that your code is passed through a promise.
await blocks the code execution within the async function



An async function can contain an await expression that pauses the execution of the async function and waits for
the passed Promise's resolution, 
and then resumes the async function's execution and returns the resolved value. Remember, 
the await keyword is only valid inside async functions.


Projects each source value to an Observable which is merged in the output Observable, 
emitting values only from the most recently projected Observable.
